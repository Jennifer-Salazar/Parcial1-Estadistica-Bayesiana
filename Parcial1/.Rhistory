AIC1 <- exp(crit.inf.resid(resmod1.orig,n.par=npar1))
BIC1 <- exp(crit.inf.resid(resmod1.orig ,n.par=npar1, AIC="FALSE"))
resmod2.orig <- residuals(mod2) #seudo-residuos en la escala original. Usados s?lo para calcular AIC y BIC
npar2 <- length(coef(mod2)[coef(mod2)!=0]) #n?mero par?metros modelo 1
AIC2 <- exp(crit.inf.resid(resmod1.orig,n.par=npar2))
BIC2 <- exp(crit.inf.resid(resmod1.orig ,n.par=npar2, AIC="FALSE"))
et3 <- yt - mod3_ajust
p3 <- round(mod3$enp)+s-1
AIC3 <- exp(crit.inf.resid(residuales=et3,n.par=p3))
BIC3 <- exp(crit.inf.resid(residuales=et3,n.par=p3,AIC="FALSE"))
p4 <- 2+s-1 #Aprox. del n?mero de par?metros del suavizamiento
AIC4 <- exp(crit.inf.resid(residuales=residuals(mod4),n.par=p4))
BIC4 <- exp(crit.inf.resid(residuales=residuals(mod4),n.par=p4,AIC="FALSE"))
library(kableExtra)
Modelo <- c(1,2,3,4)
p <- c(npar1, npar2, p3, p4)
AIC <- c(AIC1, AIC2, AIC3, AIC4)
BIC <- c(BIC1, BIC2, BIC3, BIC4)
Criterios_inf <- data.frame(Modelo, p, AIC, BIC)
p1 <- 2 # grado del polinomio modelo 1
p2 <- 3 # grado del polinomio modelo 2
efectosestac1 <- ts(c(coef(mod1)[(p1+2):npar1],0),freq=1,start=1)
efectosestac2 <- ts(c(coef(mod2)[(p2+2):npar2],0),freq=1,start=1)
plot(efectosestac1,lwd=4,ylab="",xlab="Periodo del año", col="blue")
lines(efectosestac2,lty=2,col="cyan4",lwd=4)
grid()
legend("topleft",legend=c("Modelo 1","Modelo 2"),col=c("blue", "cyan4"),lty=1:2,lwd=2)
#extracción estimaciones en t=216 de efectos estacionales segun Holt-Winters.
deltasiHW=ts(mod4$coef[c(3:14)],freq=1,start=1)#Estimaciones de los efectos estacionales segun filtro de descomposicióon
deltasDescomp=ts(deltas_i,freq=1,start=1)
deltasilocales=data.frame(rbind(deltasiHW,deltasDescomp),row.names=c("HW","Descomp&loess"))
names(deltasilocales)=c(1:12)#Gráfico de los efectos estacionales estimados
plot(deltasiHW,lwd=4,ylim=c(min(deltasiHW,deltasDescomp),max(deltasiHW,deltasDescomp)+0.05),ylab="",xlab="Mes del año")
lines(deltasDescomp,lty=2,lwd=4,col=2)
grid()
legend("topleft",legend=c("Efectos estacionales H-W en t=216","Efectos estacionales Filtro de descomposición"),col=1:2,lty=1:2,lwd=3, cex=0.7)
plot(efectosestac1,lwd=3, col="blue", xlab="Periodo del año", ylim =c(-10,23))
lines(efectosestac2,lty=2,col="cyan4",lwd=4)
lines(deltasiHW,lwd=3, col=3)
lines(deltasDescomp,lty=2,lwd=4,col="purple")
grid()
legend("topleft",legend=c("Polinomial cuadrático","Polinomial cúbico", "SEHW","DLC"),col=c("blue", "cyan4", 3, "purple"),lwd=3, cex=0.8)
plot(ytd, ylab="")
lines(mod3_Tt, col=2, lwd = 2)
grid()
legend("topleft", legend=c("Serie ajustada estacionalmente", "Tendencia LOESS cuadrático (AICC)"), col=c(1,2), lty=1)
par(mfrow=c(2,2))
plot(Datos20)
lines(mod1_ajust, col=2, lwd=2)
legend("topleft", legend = c("Original", "Ajuste del modelo1"), lty=1, col=c(1,2), cex=0.5)
plot(Datos20)
lines(mod2_ajust, col=2, lwd=2)
legend("topleft", legend = c("Original", "Ajuste del modelo2"), lty=1, col=c(1,2), cex=0.5)
plot(Datos20)
lines(mod3_ajust, col=2, lwd=2)
legend("topleft", legend = c("Original", "Ajuste D&LC(AICC)"), lty=1, col=c(1,2), cex=0.5)
plot(Datos20)
lines(mod4_ajust, col=2, lwd=2)
legend("topleft", legend=c("Original","Ajuste H-W"), col=c(1,2), lty=1, cex=0.5)
par(mfrow=c(2,2))
# Residuales vs tiempo mod1
plot.ts(residuals(mod1))
abline(h=c(-2*summary(mod1)$sigma, 0, 2*summary(mod1)$sigma), col=2)
legend("topleft", legend=c("Modelo1"), lty=1, col = 1, lwd=2)
# Residuales vs tiempo mod2
plot.ts(residuals(mod2))
abline(h=c(-2*summary(mod2)$sigma, 0, 2*summary(mod2)$sigma), col=2)
legend("topleft", legend=c("Modelo2"), lty=1, col = 1, lwd=2)
# Residuales vs tiempo mod3
df=n-(round(mod3$enp)+s-1) #Grados de libertad aproximados del ajuste total
MSE3=sum(et3^2)/df #MSE aproximado del ajuste total del modelo 3
plot(et3,ylim=c(min(-2*sqrt(MSE3),et3),max(2*sqrt(MSE3),et3)))
abline(h=c(-2*sqrt(MSE3),0,2*sqrt(MSE3)),col=2)
legend("topleft", legend=c("Modelo3"), lty=1, col = 1, lwd=2)
# Residuales vs tiempo mod4
et4=residuals(mod4)
df4=n-2*s-((s-1)+2)
MSE4=mod4$SSE/df4 #MSE aproximado del ajuste total del Suavizamiento
plot(et4,ylim=c(min(-2*sqrt(MSE4),et4),max(2*sqrt(MSE4),et4)))
abline(h=c(-2*sqrt(MSE4),0,2*sqrt(MSE4)),col=2)
legend("topleft", legend=c("Modelo4"), lty=1, col = 1, lwd=2)
par(mfrow=c(2,2))
# Residuales vs valores ajustados mod1
plot(fitted(mod1), residuals(mod1))
abline(h=c(-2*summary(mod1)$sigma, 0, 2*summary(mod1)$sigma), col=2)
legend("topleft", legend=c("Modelo1"), lty=1, col = 1, lwd=2,cex = 0.8)
# Residuales vs valores ajustados mod2
plot(fitted(mod2), residuals(mod2))
abline(h=c(-2*summary(mod2)$sigma, 0, 2*summary(mod2)$sigma), col=2)
legend("topleft", legend=c("Modelo2"), lty=1, col = 1, lwd=2,cex = 0.8)
# Residuales vs valores ajustados mod3
plot(as.numeric(mod3_ajust),et3,ylim=c(min(-2*sqrt(MSE3),et3),max(2*sqrt(MSE3),et3)))
abline(h=c(-2*sqrt(MSE3),0,2*sqrt(MSE3)),col=2)
legend("topleft", legend=c("Modelo3"), lty=1, col = 1, lwd=2,cex = 0.8)
# Residuales vs valores ajustados mod4
plot(as.numeric(mod4_ajust),et4,ylim=c(min(-2*sqrt(MSE4),et4),max(2*sqrt(MSE4),et4)))
abline(h=c(-2*sqrt(MSE4),0,2*sqrt(MSE4)),col=2)
legend("topleft", legend=c("Modelo4"), lty=1, col = 1, lwd=2,cex = 0.8)
ytnuevo
kable(data.frame(ytnuevo))
ytpron1 <- predict(mod1, newdata=data.frame(t=tnuevo, I1=I1n, I2=I2n, I3=I3n, I4=I4n, I5=I5n, I6=I6n, I7=I7n, I8=I8n, I9=I9n, I10=I10n, I11=I11n), interval="prediction")
ytpron1 <- ts(ytpron1,freq=12,start=c(2019,1))
ytpron1
ytpron2 <- predict(mod2, newdata=data.frame(t=tnuevo, I1=I1n, I2=I2n, I3=I3n, I4=I4n, I5=I5n, I6=I6n, I7=I7n, I8=I8n, I9=I9n, I10=I10n, I11=I11n), interval="prediction")
ytpron2 <- ts(ytpron2,freq=12,start=c(2019,1))
ytpron2
#Pronósticos de la tendencia por loess cuadrático óptimo (AICC)
Ttnuevo3 <- predict(loess(ytd~t,span=alfa.optim2,degree=2,control=loess.control(surface="direct")),
data.frame(t=tnuevo),se=FALSE)
Ttnuevo3 <- ts(Ttnuevo3,freq=12,start=c(2019,1)) #convirtiendo en serie de tiempo al pronóstico de Tt, modelo 3
ytpron3 <- Ttnuevo3 + Stnuevo #Pronóstico puntual Modelo 2
#Tabla con pronósticos de las componentes y de la serie, Modelo 2
tablapron3 <- cbind(Pron_Tt=Ttnuevo3,Pron_St=Stnuevo,Pron_serie=ytpron3)
tablapron3
pronos4 <- predict(mod4, n.ahead=12,prediction=T,level=0.95)
ytpron4 <- pronos4[,1] #sólo los pronósticos puntuales del suavizamiento
a <-accuracy(ytpron1,ytnuevo) #Modelo 1
b <- accuracy(ytpron2,ytnuevo) #Modelo 2
c <- accuracy(ytpron3,ytnuevo) #Modelo 3
d <- accuracy(ytpron4,ytnuevo) #Modelo 4
rbind(a,b,c,d)
#Creando función usuario amplitud() para calcular la amplitud promedio de los I.P en pronósticos ex – post
amplitud=function(LIP,LSP){
a=LSP-LIP
am=mean(a)
am
}
#Creando función usuario cobertura() para calcular la cobertura de los I.P en pronósticos ex – post
cobertura=function(real,LIP,LSP){
I=ifelse(real>=LIP & real<=LSP,1,0)
p=mean(I)
p
}
amplitud(LIP=ytpron1[,2],LSP=ytpron1[,3])
cobertura(real=ytnuevo,LIP=ytpron1[,2],LSP=ytpron1[,3])
amplitud(LIP=ytpron2[,2],LSP=ytpron2[,3])
cobertura(real=ytnuevo,LIP=ytpron2[,2],LSP=ytpron2[,3])
#Precisión pronósticos por I.P Holt-Winters
amplitud(LIP=pronos4[,3],LSP=pronos4[,2])
cobertura(real=ytnuevo,LIP=pronos4[,3],LSP=pronos4[,2])
plot(ytnuevo,lwd=2, col=1, type="b", pch=1, xlab="Periodo del año", ylab="")
lines(ytpron1[,1],lwd=2, col=2, type="b", pch=2)
lines(ytpron2[,1],lwd=2, col=3, type="b", pch=3)
lines(ytpron3,lwd=2,col=4, type="b", pch=4)
lines(ytpron4,lwd=2,col=5, type="b", pch=5)
grid()
legend("bottomright",legend=c("Real","Pronostico modelo1", "Pronostico modelo2", "Pronostico modelo3", "Pronostico modelo4"),col=1:5,lwd=2, pch=1:5, cex=0.8)
getwd()
pnorm(3.3541)
pnorm(3.6742)
pnorm(1.6583)-pnorm(-6.6332)
pnorm(1.6583)
pnorm(1.6583)-pnorm(-3.3166)
library(pagedown)
chrome_print("Taller11_propuesta.Rmd")
pi
library(pagedown)
chrome_print("Taller12_propuesta.Rmd")
chrome_print("Taller12_propuesta.Rmd")
setwd("D:/Escritorio/Categoricos/Tareas")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
load("datos.RData") # función que permite cargar los datos
kable(head(datos, 10))%>%
kable_paper(full_width = F)
dim(datos)
str(datos$COLE_INST_NOMBRE)
#Creación del conjunto de datos con las variables colegio y economia
aux <- datos[, c("COLE_INST_NOMBRE", "economia")]
head(aux)
kable(head(aux, 10)) %>%
kable_paper(full_width = F)
# Conversión de la variable a numérica
aux$economia <- as.numeric(aux$economia)
summary(aux$economia)
require(dplyr)
economia_colegio <- aux%>%
group_by(COLE_INST_NOMBRE) %>%
summarize(economia_colegio=mean(economia, na.rm = TRUE))
head(economia_colegio)
kable(head(economia_colegio, 10))%>%
kable_styling()
knitr::opts_chunk$set(echo = TRUE, warning=FALE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
kable(head(economia_colegio, 10))%>%
kable_styling()
dim(economia_colegio)
summary(economia_colegio$economia_colegio)
# deciles
quantile(economia_colegio$economia_colegio, prob=seq(0, 1, length = 11), na.rm = TRUE)
grupo1 <- filter(economia_colegio, economia_colegio >= 1.000000 & economia_colegio < 2.526462)
kable(head(grupo1, 10))%>%
kable_styling()
grupo2 <- filter(economia_colegio, economia_colegio >= 2.526462 & economia_colegio < 2.877596)
kable(head(grupo2, 10))%>%
kable_styling()
grupo3 <- filter(economia_colegio, economia_colegio >= 2.877596 & economia_colegio < 3.142857)
kable(head(grupo3, 10))%>%
kable_styling()
grupo4 <- filter(economia_colegio, economia_colegio >= 3.142857 & economia_colegio < 3.453125)
kable(head(grupo4, 10))%>%
kable_styling()
grupo5 <- filter(economia_colegio, economia_colegio >= 3.453125 & economia_colegio < 3.786885)
kable(head(grupo5, 10))%>%
kable_styling()
grupo6 <- filter(economia_colegio, economia_colegio >= 3.786885 & economia_colegio < 4.212975)
kable(head(grupo6, 10))%>%
kable_styling()
grupo7 <- filter(economia_colegio, economia_colegio >= 4.212975 & economia_colegio < 4.696853)
kable(head(grupo7, 10))%>%
kable_styling()
grupo8 <- filter(economia_colegio, economia_colegio >= 4.696853 & economia_colegio < 5.263978)
kable(head(grupo8, 10))%>%
kable_styling()
grupo9 <- filter(economia_colegio, economia_colegio >= 5.263978 & economia_colegio < 6.088824)
kable(head(grupo9, 10))%>%
kable_styling()
grupo10 <- filter(economia_colegio, economia_colegio >= 6.088824 & economia_colegio < 8.500000)
kable(head(grupo10, 10))%>%
kable_styling()
economia_colegio$grupo <- economia_colegio$economia_colegio
#grupo 1.
economia_colegio$grupo[economia_colegio$economia_colegio >= 1.000000 & economia_colegio$economia_colegio < 2.526462] <- 1
#grupo 2.
economia_colegio$grupo[economia_colegio$economia_colegio >= 2.526462 & economia_colegio$economia_colegio < 2.877596] <- 2
#grupo 3.
economia_colegio$grupo[economia_colegio$economia_colegio >= 2.877596 & economia_colegio$economia_colegio < 3.142857] <- 3
#grupo 4.
economia_colegio$grupo[economia_colegio$economia_colegio >= 3.142857 & economia_colegio$economia_colegio < 3.453125] <- 4
#grupo 5.
economia_colegio$grupo[economia_colegio$economia_colegio >= 3.453125 & economia_colegio$economia_colegio < 3.786885] <- 5
# grupo 6.
economia_colegio$grupo[economia_colegio$economia_colegio >= 3.786885 & economia_colegio$economia_colegio < 4.212975] <- 6
#grupo 7.
economia_colegio$grupo[economia_colegio$economia_colegio >= 4.212975 & economia_colegio$economia_colegio < 4.696853] <- 7
#grupo 9.
economia_colegio$grupo[economia_colegio$economia_colegio >= 5.263978 & economia_colegio$economia_colegio < 6.088824] <- 9
#grupo 10.
economia_colegio$grupo[economia_colegio$economia_colegio >= 6.088824 & economia_colegio$economia_colegio <= 8.500000] <- 10
economia_colegio$grupo <- as.factor(economia_colegio$grupo)
summary(economia_colegio$grupo )
economia_colegio$grupo <- as.factor(economia_colegio$grupo)
summary(economia_colegio$grupo )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
library(kableExtra)
load("datos.RData") # función que permite cargar los datos
kable(head(datos, 10))%>%
kable_paper(full_width = F)
dim(datos)
str(datos$COLE_INST_NOMBRE)
#Creación del conjunto de datos con las variables colegio y economia
aux <- datos[, c("COLE_INST_NOMBRE", "economia")]
kable(head(aux, 10)) %>%
kable_paper(full_width = F)
# Conversión de la variable a numérica
aux$economia <- as.numeric(aux$economia)
summary(aux$economia)
require(dplyr)
economia_colegio <- aux%>%
group_by(COLE_INST_NOMBRE) %>%
summarize(economia_colegio=mean(economia, na.rm = TRUE))
kable(head(economia_colegio, 10))%>%
kable_styling()
dim(economia_colegio)
summary(economia_colegio$economia_colegio)
# deciles
quantile(economia_colegio$economia_colegio, prob=seq(0, 1, length = 11), na.rm = TRUE)
grupo1 <- filter(economia_colegio, economia_colegio >= 1.000000 & economia_colegio < 2.526462)
kable(head(grupo1, 10))%>%
kable_styling()
grupo2 <- filter(economia_colegio, economia_colegio >= 2.526462 & economia_colegio < 2.877596)
kable(head(grupo2, 10))%>%
kable_styling()
grupo3 <- filter(economia_colegio, economia_colegio >= 2.877596 & economia_colegio < 3.142857)
kable(head(grupo3, 10))%>%
kable_styling()
grupo4 <- filter(economia_colegio, economia_colegio >= 3.142857 & economia_colegio < 3.453125)
kable(head(grupo4, 10))%>%
kable_styling()
grupo5 <- filter(economia_colegio, economia_colegio >= 3.453125 & economia_colegio < 3.786885)
kable(head(grupo5, 10))%>%
kable_styling()
grupo6 <- filter(economia_colegio, economia_colegio >= 3.786885 & economia_colegio < 4.212975)
kable(head(grupo6, 10))%>%
kable_styling()
grupo7 <- filter(economia_colegio, economia_colegio >= 4.212975 & economia_colegio < 4.696853)
kable(head(grupo7, 10))%>%
kable_styling()
grupo8 <- filter(economia_colegio, economia_colegio >= 4.696853 & economia_colegio < 5.263978)
kable(head(grupo8, 10))%>%
kable_styling()
grupo9 <- filter(economia_colegio, economia_colegio >= 5.263978 & economia_colegio < 6.088824)
kable(head(grupo9, 10))%>%
kable_styling()
grupo10 <- filter(economia_colegio, economia_colegio >= 6.088824 & economia_colegio < 8.500000)
kable(head(grupo10, 10))%>%
kable_styling()
economia_colegio$grupo <- economia_colegio$economia_colegio
#grupo 1.
economia_colegio$grupo[economia_colegio$economia_colegio >= 1.000000 & economia_colegio$economia_colegio < 2.526462] <- 1
#grupo 2.
economia_colegio$grupo[economia_colegio$economia_colegio >= 2.526462 & economia_colegio$economia_colegio < 2.877596] <- 2
#grupo 3.
economia_colegio$grupo[economia_colegio$economia_colegio >= 2.877596 & economia_colegio$economia_colegio < 3.142857] <- 3
#grupo 4.
economia_colegio$grupo[economia_colegio$economia_colegio >= 3.142857 & economia_colegio$economia_colegio < 3.453125] <- 4
#grupo 5.
economia_colegio$grupo[economia_colegio$economia_colegio >= 3.453125 & economia_colegio$economia_colegio < 3.786885] <- 5
# grupo 6.
economia_colegio$grupo[economia_colegio$economia_colegio >= 3.786885 & economia_colegio$economia_colegio < 4.212975] <- 6
#grupo 7.
economia_colegio$grupo[economia_colegio$economia_colegio >= 4.212975 & economia_colegio$economia_colegio < 4.696853] <- 7
#grupo 8.
economia_colegio$grupo[economia_colegio$economia_colegio >= 4.696853 & economia_colegio$economia_colegio < 5.263978] <- 8
#grupo 9.
economia_colegio$grupo[economia_colegio$economia_colegio >= 5.263978 & economia_colegio$economia_colegio < 6.088824] <- 9
#grupo 10.
economia_colegio$grupo[economia_colegio$economia_colegio >= 6.088824 & economia_colegio$economia_colegio <= 8.500000] <- 10
economia_colegio$grupo <- as.factor(economia_colegio$grupo)
summary(economia_colegio$grupo)
# Código que permite incluir las dos nuevas variables al conjunto de datos original que esta por estudiantes
datos_final <- merge(datos, economia_colegio, by="COLE_INST_NOMBRE", all.x=T)
kable(head(datos_final[,c("ESTU_CONSECUTIVO", "COLE_INST_NOMBRE", "economia", "economia_colegio", "grupo")], 10))%>%
kable_styling()
sum(as.numeric(datos_final$economia) > datos_final$economia_colegio, na.rm = TRUE)
sum(as.numeric(datos_final$economia) < datos_final$economia_colegio, na.rm = TRUE)
sum(as.numeric(datos_final$economia) == datos_final$economia_colegio, na.rm = TRUE)
resultado<-cut(datos_final$ESTU_PUESTO,breaks=(0:10)*100)
table(resultado)
kable(head(datos_final[,c("ESTU_CONSECUTIVO", "COLE_INST_NOMBRE", "economia", "economia_colegio", "grupo")], 10))%>%
kable_paper(full_width = F)
sum(as.numeric(datos_final$economia) > datos_final$economia_colegio, na.rm = TRUE)
sum(as.numeric(datos_final$economia) < datos_final$economia_colegio, na.rm = TRUE)
sum(as.numeric(datos_final$economia) == datos_final$economia_colegio, na.rm = TRUE)
resultado<-cut(datos_final$ESTU_PUESTO,breaks=(0:10)*100)
table(resultado)
table(resultado, datos_final$grupo)
round(prop.table(table(resultado, datos_final$grupo),1),3)
xtable(round(prop.table(table(resultado, datos_final$grupo),1),3))
library(xtable)
xtable(round(prop.table(table(resultado, datos_final$grupo),1),3))
round(prop.table(table(resultado, datos_final$grupo),1),3)
round(prop.table(table(resultado, datos_final$grupo)),3)
round(prop.table(table(resultado, datos_final$grupo),2),3)
xtable(round(prop.table(table(resultado, datos_final$grupo),2),3))
prop.table(table(resultado, datos_final$grupo),2)
library(pagedown)
chrome_print("Tarea4.Rmd")
chrome_print("Tarea4.Rmd")
chrome_print("Tarea4.Rmd")
knitr::opts_chunk$set(echo = TRUE)
#Nota: para que todos los codigos de este sript funcionen se debe cargar previamente la tarea 4.
library(kableExtra)
#Cargar datos iniciales
load("datos.RData")
#Cargar datos con variables economicas
load("datos_final.RData")
#Nota: para que todos los codigos de este sript funcionen se debe cargar previamente la tarea 4.
library(kableExtra)
#Cargar datos iniciales
load("datos.RData")
#Cargar datos con variables economicas
load("datos_final.RData")
resultado<-cut(datos_final$ESTU_PUESTO,breaks=(0:10)*100)
kable(table(resultado)) %>%
kable_paper(full_width = F)
par(mar=c(6,4,4,4))
barplot(table(resultado), col="cyan4", main="Frecuencias de los niveles de la variable resultado", las=2)
riqueza_colegio <- datos_final$grupo
kable(table(riqueza_colegio)) %>%
kable_paper(full_width = F)
par(mar=c(4,4,4,4))
barplot(table(riqueza_colegio), col="cyan4", main="Frecuencias de la variable riqueza del colegio", ylab="frecuencias", xlab="niveles")
# Código que crea la variable resultado
resultado<-cut(datos_final$ESTU_PUESTO,breaks=(0:10)*100)
#Tabla de frecuencias de la variable resultado
table(resultado)
# Gráfico de frecuencias de la variable resultado
barplot(table(resultado), col="cyan4", main="Frecuencias de los niveles de la variable resultado", ylab="frecuencias", las=2)
# Tabla de frecuencias de la variable riqueza del colegio
table(riqueza_colegio)
# Gráfico de frecuencias de la variable riqueza del colegio
barplot(table(riqueza_colegio), col="cyan4", main="Frecuencias de la variable riqueza del colegio", ylab="frecuencias", xlab="niveles")
# Tabla de contingencia usada para el análisis
table(riqueza_colegio, resultado)
# Tabla de contingencia usada para el análisis
xtable(table(riqueza_colegio, resultado))
# Tabla de contingencia usada para el análisis
table(riqueza_colegio, resultado)
<center>
![](tabla_contingencia.png)
</center>
# Variable que contiene la tabla de contingencia considerada
N <- table(riqueza_colegio, resultado)
N.mas<-colSums(N)
N.mas
prob.0<-N.mas/sum(N.mas)
prob.0
N.filas<-rowSums(N)
esperados<-matrix(N.filas,ncol=1)%*%matrix(prob.0,nrow=1)
esperados
N.filas<-rowSums(N)
esperados<-matrix(N.filas,ncol=1)%*%matrix(prob.0,nrow=1)
esperados
knitr::opts_chunk$set(echo = TRUE)
#Nota: para que todos los codigos de este sript funcionen se debe cargar previamente la tarea 4.
library(kableExtra)
#Cargar datos iniciales
load("datos.RData")
#Cargar datos con variables economicas
load("datos_final.RData")
resultado<-cut(datos_final$ESTU_PUESTO,breaks=(0:10)*100)
kable(table(resultado)) %>%
kable_paper(full_width = F)
par(mar=c(6,4,4,4))
barplot(table(resultado), col="cyan4", main="Frecuencias de los niveles de la variable resultado", las=2)
riqueza_colegio <- datos_final$grupo
kable(table(riqueza_colegio)) %>%
kable_paper(full_width = F)
par(mar=c(4,4,4,4))
barplot(table(riqueza_colegio), col="cyan4", main="Frecuencias de la variable riqueza del colegio", ylab="frecuencias", xlab="niveles")
# $$\begin{array}{| c | c | c | c | c |}
# \hline
# & (0,100] & (100,200] & (200,300] & (300,400] & (400,500] & (500,600] & (600,700] & (700,800] & (800,900] & (900,1000] \\
#   \hline
# 1 & 542 & 1053 & 1434 & 1819 & 2297 & 2781 & 3167 & 3664 & 4318 & 4883 \\
#   2 & 761 & 1630 & 2220 & 2806 & 3335 & 3914 & 4389 & 5091 & 5711 & 6065 \\
#   3 & 1017 & 2039 & 2778 & 3356 & 3914 & 4578 & 5124 & 5684 & 6209 & 6798 \\
#   4 & 1982 & 3510 & 4505 & 5219 & 5844 & 6233 & 6760 & 7107 & 7295 & 7331 \\
#   5 & 2713 & 4636 & 5530 & 6446 & 6908 & 7105 & 7454 & 7844 & 7915 & 7857 \\
#   6 & 4198 & 6515 & 7594 & 7885 & 8073 & 8288 & 8359 & 8091 & 7956 & 7314 \\
#   7 & 6280 & 8851 & 9423 & 9413 & 9144 & 8743 & 8443 & 7565 & 7160 & 6221 \\
#   8 & 8408 & 9909 & 9643 & 8870 & 8106 & 7507 & 6551 & 5940 & 5033 & 4318 \\
#   9 & 9491 & 8404 & 6943 & 5752 & 4790 & 4053 & 3401 & 2892 & 2406 & 1835 \\
#   10 & 19197 & 8455 & 4955 & 3449 & 2440 & 1756 & 1248 & 999 & 827 & 620 \\
#  \hline
# \end{array}$$
# Variable que contiene la tabla de contingencia considerada
N <- table(riqueza_colegio, resultado)
N.mas<-colSums(N)
# $$\begin{array}{| c | c | c | c | c |}
# \hline
# (0,100] & (100,200] & (200,300] & (300,400] & (400,500] & (500,600] & (600,700] & (700,800] & (800,900] & (900,1000] \\
#   \hline
# 54589 & 55002 & 55025 & 55015 & 54851 & 54958 & 54896 & 54877 & 54830 & 53242 \\
#  \hline
# \end{array}$$
prob.0<-N.mas/sum(N.mas)
# $$\begin{array}{| c | c | c | c | c |}
# \hline
# (0,100] & (100,200] & (200,300] & (300,400] & (400,500] & (500,600] & (600,700] & (700,800] & (800,900] & (900,1000] \\
#   \hline
#  0.0997 & 0.1005 & 0.1005 & 0.1005 & 0.1002 & 0.1004 & 0.1003 & 0.1003 & 0.1002 & 0.0973 \\
#  \hline
# \end{array}$$
N.filas<-rowSums(N)
esperados<-matrix(N.filas,ncol=1)%*%matrix(prob.0,nrow=1)
esperados
# $$\begin{array}{| c | c | c | c | c |}
# \hline
# & (0,100] & (100,200] & (200,300] & (300,400] & (400,500] & (500,600] & (600,700] & (700,800] & (800,900] & (900,1000] \\
#   \hline
# 1 & 2589.18 & 2608.77 & 2609.86 & 2609.39 & 2601.61 & 2606.69 & 2603.74 & 2602.84 & 2600.61 & 2525.29 \\
#   2 & 3583.04 & 3610.15 & 3611.66 & 3611.00 & 3600.24 & 3607.26 & 3603.19 & 3601.95 & 3598.86 & 3494.63 \\
#   3 & 4139.12 & 4170.44 & 4172.18 & 4171.42 & 4158.99 & 4167.10 & 4162.40 & 4160.96 & 4157.40 & 4036.99 \\
#   4 & 5564.38 & 5606.48 & 5608.82 & 5607.80 & 5591.09 & 5601.99 & 5595.67 & 5593.74 & 5588.95 & 5427.08 \\
#   5 & 6424.38 & 6472.99 & 6475.69 & 6474.52 & 6455.22 & 6467.81 & 6460.51 & 6458.28 & 6452.75 & 6265.86 \\
#   6 & 7408.37 & 7464.42 & 7467.54 & 7466.18 & 7443.92 & 7458.45 & 7450.03 & 7447.45 & 7441.07 & 7225.56 \\
#   7 & 8103.59 & 8164.90 & 8168.31 & 8166.83 & 8142.48 & 8158.37 & 8149.16 & 8146.34 & 8139.37 & 7903.63 \\
#   8 & 7409.57 & 7465.62 & 7468.75 & 7467.39 & 7445.13 & 7459.65 & 7451.24 & 7448.66 & 7442.28 & 7226.73 \\
#   9 & 4983.96 & 5021.67 & 5023.77 & 5022.86 & 5007.88 & 5017.65 & 5011.99 & 5010.26 & 5005.97 & 4860.98 \\
#   10 & 4383.40 & 4416.56 & 4418.41 & 4417.61 & 4404.44 & 4413.03 & 4408.05 & 4406.52 & 4402.75 & 4275.24 \\
#  \hline
# \end{array}$$
# $$\begin{array}{| c | c | c | c | c |}
# \hline
# (0,100] & (100,200] & (200,300] & (300,400] & (400,500] & (500,600] & (600,700] & (700,800] & (800,900] & (900,1000] \\
#   \hline
# 54589 & 55002 & 55025 & 55015 & 54851 & 54958 & 54896 & 54877 & 54830 & 53242 \\
#  \hline
# \end{array}$$
esperados
# Estádistico de prueba
estadistico <- -2*sum(N*log(esperados/N))
#valor p
pchisq(estadistico, (10-1)*(10-1),lower.tail=F)
estadistico
# Estádistico de prueba
estadistico <- -2*sum(N*log(esperados/N))
estadistico
#valor p
pchisq(estadistico, (10-1)*(10-1),lower.tail=F)
boxplot(as.numeric(resultado)~riqueza_colegio, col="cyan4")
table(resultado~riqueza_colegio)
table(resultado,riqueza_colegio)
boxplot(as.numeric(resultado)~datos_final$economia, col="cyan4")
chrome_print("Tarea5.Rmd")
getwd()
setwd("D:/Escritorio/Monitoria")
getwd()
library(pagedown)
chrome_print("Taller16_propuesta.Rmd")
getwd()
library(pagedown)
chrome_print("Taller17_propuesta.Rmd")
qf(0.025, 11, 12, lower.tail = F)
1/qf(0.025, 11, 12, lower.tail = F)
qnorm(0.01, lower.tail = F)
pnorm(9.0527, lower.tail = F)
chrome_print("Taller18_propuesta.Rmd")
getwd()
setwd("~/GitHub/Parcial1-Estadistica-Bayesiana/Parcial1")
